const { SlashCommandBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder, ComponentType } = require('discord.js');
const { pool } = require('../../handlers/db.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('divorciar')
    .setDescription('„Äåüíî Social„ÄçDivorcie-se do seu parceiro(a).'),

  async execute(interaction) {
    const userId = interaction.user.id;

    // Verifica se o usu√°rio est√° em um casamento
    const [casamentos] = await pool.query(
      'SELECT * FROM casamentos WHERE user_id = ? OR parceiro_id = ?',
      [userId, userId]
    );

    if (!casamentos.length) {
      return interaction.reply({ content: '‚ùå Voc√™ n√£o est√° casado(a).', ephemeral: true });
    }

    const casamento = casamentos[0];
    const parceiroId = casamento.user_id === userId ? casamento.parceiro_id : casamento.user_id;

    const parceiro = await interaction.guild.members.fetch(parceiroId).catch(() => null);
    const autor = interaction.member;

    if (!parceiro) {
      return interaction.reply({
        content: '‚ùå N√£o consegui encontrar seu parceiro(a) neste servidor.',
        ephemeral: true,
      });
    }

    // Bot√£o de confirma√ß√£o inicial
    const confirmarDivorcioBtn = new ButtonBuilder()
      .setCustomId('confirmar_divorcio')
      .setLabel('üíî Confirmar Div√≥rcio')
      .setStyle(ButtonStyle.Danger);

    const row = new ActionRowBuilder().addComponents(confirmarDivorcioBtn);

    const msg = await interaction.reply({
      content: `Voc√™ tem certeza que quer se divorciar de <@${parceiroId}>?`,
      components: [row],
      ephemeral: true,
      fetchReply: true,
    });

    // Coletor para o autor confirmar
    const filter = i => i.user.id === userId && i.customId === 'confirmar_divorcio';
    const confirmation = await msg.awaitMessageComponent({ filter, time: 30_000 }).catch(() => null);

    if (!confirmation) {
      return interaction.editReply({ content: '‚è±Ô∏è Tempo esgotado para confirmar o div√≥rcio.', components: [] });
    }

    // Solicita aprova√ß√£o do parceiro
    const aceitarBtn = new ButtonBuilder()
      .setCustomId('aceitar_divorcio')
      .setLabel('‚úÖ Aceitar Div√≥rcio')
      .setStyle(ButtonStyle.Success);

    const recusarBtn = new ButtonBuilder()
      .setCustomId('recusar_divorcio')
      .setLabel('‚ùå Recusar')
      .setStyle(ButtonStyle.Secondary);

    const parceiroRow = new ActionRowBuilder().addComponents(aceitarBtn, recusarBtn);

    try {
      const msgParceiro = await parceiro.send({
        content: `üíî <@${userId}> quer se divorciar de voc√™.\nVoc√™ aceita o div√≥rcio?`,
        components: [parceiroRow],
      });

      const parceiroFilter = i => i.user.id === parceiroId && ['aceitar_divorcio', 'recusar_divorcio'].includes(i.customId);
      const parceiroResponse = await msgParceiro.awaitMessageComponent({ filter: parceiroFilter, time: 60_000 }).catch(() => null);

      if (!parceiroResponse) {
        await msgParceiro.edit({ content: '‚è±Ô∏è Tempo esgotado. O div√≥rcio foi cancelado.', components: [] });
        return confirmation.update({ content: '‚ùå O parceiro(a) n√£o respondeu a tempo. Div√≥rcio cancelado.', components: [] });
      }

      if (parceiroResponse.customId === 'recusar_divorcio') {
        await parceiroResponse.update({ content: '‚ùå Voc√™ recusou o div√≥rcio.', components: [] });
        return confirmation.update({ content: '‚ùå Seu parceiro(a) recusou o div√≥rcio.', components: [] });
      }

      // Prossegue com o div√≥rcio
      await pool.query('DELETE FROM casamentos WHERE id = ?', [casamento.id]);

      if (autor.manageable) await autor.setNickname(null).catch(() => {});
      if (parceiro.manageable) await parceiro.setNickname(null).catch(() => {});

      await parceiroResponse.update({ content: 'üíî Div√≥rcio realizado com sucesso.', components: [] });
      return confirmation.update({ content: `‚úÖ Voc√™ se divorciou de <@${parceiroId}> com sucesso.`, components: [] });

    } catch (error) {
      console.error('Erro durante o processo de div√≥rcio:', error);
      return interaction.editReply({
        content: '‚ö†Ô∏è Ocorreu um erro ao tentar realizar o div√≥rcio. Tente novamente mais tarde.',
        components: [],
      });
    }
  },
};